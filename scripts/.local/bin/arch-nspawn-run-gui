#!/usr/bin/python
import os
import sys
import getopt
from subprocess import run
from pathlib import Path


def die(msg: str, code: int = 1):
    print(msg, file=sys.stderr)
    sys.exit(code)


nvidia = False
try:
    opts, args = getopt.getopt(sys.argv[1:], "", ["nvidia"])
except getopt.GetoptError as e:
    die(e.msg, 2)
for opt, arg in opts:
    if opt == "--nvidia":
        nvidia = True
if not args:
    die("No command provided, exiting...")

run_host = os.getenv("XDG_RUNTIME_DIR")
if not run_host:
    run_host = "/run/user/" + os.getuid()
run_bind = "/run/user/host"

xdisplay = os.getenv("DISPLAY")
xcursor = os.getenv("XCURSOR_THEME")
xauth_host = f"{run_host}/arch-nspawn_xauth"
xauth_bind = f"{run_bind}/arch-nspawn_xauth"

xauth_host_path = Path(xauth_host)
if not xauth_host_path.is_file():
    xauth_host_path.touch()
    run('xauth nextract - "{}" | sed -e "s/^..../ffff/" | xauth -f "{}" nmerge -'
        .format(xdisplay, xauth_host), shell=True)

binds_ro = {
    "option": "--bind-ro=",
    "param": [
        "/tmp/.X11-unix",
        "{}/pulse:{}/pulse".format(run_host, run_bind),
        "{}/bus:{}/bus".format(run_host, run_bind),
        "/usr/share/icons"
    ]
}
binds = {
    "option": "--bind=",
    "param": [
        f"{xauth_host}:{xauth_bind}",
        "/dev/dri",  # "/dev/nvidia0", "/dev/nvidiactl", "/dev/nvidia-modeset",
        "/dev/shm", "/dev/input", "/dev/uinput"
    ]
}
devices_allow = {
    "option": "--property=DeviceAllow=",
    "param": [
        "char-drm rw",  # "char-nvidia-frontend rw",
        "/dev/shm rw", "char-input rw", "/dev/uinput rw"
    ]
}
envvars = {
    "option": "--setenv=",
    "param": [
        f"DISPLAY={xdisplay}", f"XAUTHORITY={xauth_bind}",
        f"PULSE_SERVER=unix:{run_bind}/pulse/native",
        f"DBUS_SESSION_BUS_ADDRESS=unix:path={run_bind}/bus",
        f"XCURSOR_THEME={xcursor}",
        "GDK_SCALE=1.5"
    ]
}

if nvidia:
    if Path("/dev/nvidia0").is_char_device():
        binds.get("param").extend(
            ["/dev/nvidia0", "/dev/nvidiactl", "/dev/nvidia-modeset"])
        devices_allow.get("param").extend(["char-nvidia-frontend rw"])
        envvars.get("param").extend([
            "__NV_PRIME_RENDER_OFFLOAD=1",
            "__VK_LAYER_NV_optimus=NVIDIA_only",
            "__GLX_VENDOR_LIBRARY_NAME=nvidia"
        ])
    else:
        die("/dev/nvidia0 doesn't exist or isn't a character device.\n"
            + "Check your NVIDIA driver or remove '--nvidia'")

optlists = [binds_ro, binds, devices_allow, envvars]
options = []
for _optlist in optlists:
    _option = _optlist.get("option")
    for _param in _optlist.get("param"):
        options.append("{}{}".format(_option, _param))

nspawn_cmd = ["arch-nspawn", "run"]
nspawn_cmd.extend(options)
nspawn_cmd.extend(args)
os.execvp(nspawn_cmd[0], nspawn_cmd)
